---
title: Country
datasets: []
---

<div class="d-sm-flex align-items-center justify-content-between mb-4">
  <h1 class="h3 mb-0 text-gray-800">COVID-19 in <%= country_name %></h1>
</div>

<div class="row">

  <script>
    var country_dataset = covid19_dataset_country_<%= country_iso.downcase %>;

    var latest_numbers = {};
    for (var stat in country_dataset['total']) {
      var data = country_dataset['total'][stat];
      latest_numbers[stat] = data[data.length - 1];
    }
  </script>

  <div class="col-xl-4 col-md-6 mb-4">
    <div class="card border-left-primary shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Confirmed Cases</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"><script>document.write(latest_numbers['confirmed'].toLocaleString());</script></div>
          </div>
          <div class="col-auto">
            <i class="fas fa-meh fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-4 col-md-6 mb-4">
    <div class="card border-left-danger shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Deaths</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"><script>document.write(latest_numbers['deaths'].toLocaleString());</script></div>
          </div>
          <div class="col-auto">
            <i class="fas fa-sad-tear fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-4 col-md-6 mb-4">
    <div class="card border-left-success shadow h-100 py-2">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Recovered</div>
            <div class="h5 mb-0 font-weight-bold text-gray-800"><script>document.write(latest_numbers['recovered'].toLocaleString());</script></div>
          </div>
          <div class="col-auto">
            <i class="fas fa-smile fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

</div>

<%= partial(:standard_graph_container, :locals => { :title => "Total cases of COVID-19 in #{country_name}", :graph_id => "graph_overview" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Diagnoses in states and territories over time", :graph_id => "graph_states" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "New cases per day", :graph_id => "graph_new_cases" }) %>

<script>
  var has_states = (country_dataset['subseries'] && Object.keys(country_dataset['subseries']).length > 0);
  var lines = [];

  for (var stat in country_dataset['total']) {
    lines.push(country_series_scaled(country_dataset, country_dataset, '<%= country_iso %>', scale_none, '')[stat]);
  }

  Plotly.newPlot('graph_overview', lines, default_layout, default_config);

  if (!has_states) {
    // no data, so remove the whole row
    $('#graph_states_row').remove();
  } else {
    var subseries_lines = [];

    for (var subregion in country_dataset['subseries']) {
      var dataset = country_dataset['subseries'][subregion]['total'];
      subseries_lines.push({
        x: country_dataset['timeseries_dates'],
        y: dataset['confirmed'],
        name: subregion,
      });
    }

    Plotly.newPlot('graph_states', limit_to_biggest_series(subseries_lines, 10), default_layout, default_config);
  }

  // the data is cumulative, so we make each relative it.
  function cumulative_to_delta(points) {
    var relative = [];
    var last = 0;
    for (var i in points) {
      var value = points[i];
      relative.push(value - last);
      last = value;
    }
    return relative;
  }

  var new_cases = [];
  if (!has_states) {
    new_cases.push({
      x: country_dataset['timeseries_dates'],
      y: cumulative_to_delta(country_dataset['total']['confirmed']),
      type: 'bar',
    });
  } else {
    for (var subregion in country_dataset['subseries']) {
      new_cases.push({
        x: country_dataset['timeseries_dates'],
        y: cumulative_to_delta(country_dataset['subseries'][subregion]['total']['confirmed']),
        type: 'bar',
        name: subregion,
      });
    }
  }

  Plotly.newPlot('graph_new_cases', limit_to_biggest_series(new_cases, 10), $.extend({}, default_layout, {barmode: 'stack'}), default_config);

</script>
