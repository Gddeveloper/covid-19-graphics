---
title: State
datasets: []
---

<div class="d-sm-flex align-items-center justify-content-between mb-4">
  <h1 class="h3 mb-0 text-gray-800">COVID-19 in <%= state_name %>, <%= country_name %></h1>
</div>

<div class="row">

  <script>
    var country_dataset = covid19_dataset_country_<%= country_iso.downcase %>;
    var state_dataset = country_dataset['subseries']['<%= state_code %>'];

    var latest_numbers = {};
    for (var stat in state_dataset['total']) {
      var data = state_dataset['total'][stat];
      latest_numbers[stat] = data[data.length - 1];
    }
  </script>

  <%= partial(:top_totals) %>

</div>

<%= partial(:state_country_selector, locals: { country_iso: country_iso }) %>

<%= partial(:standard_graph_container, :locals => { :title => "Total cases of COVID-19 in #{state_name}, #{country_name}", :graph_id => "graph_overview" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "New cases per day", :graph_id => "graph_new_cases" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Tests per day", :graph_id => "graph_tests" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Deaths per day", :graph_id => "graph_deaths" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Hospital admissions for COVID-19 per day", :graph_id => "graph_hospital_admissions" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Cases currently hospitalised", :graph_id => "graph_hospital_current" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Cases currently in ICU", :graph_id => "graph_icu_current" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Cases currently on ventilators", :graph_id => "graph_ventilators_current" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Sources of infection", :graph_id => "graph_sources" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Locally acquired cases (new cases per day)", :graph_id => "graph_community" }) %>
<%= partial(:standard_graph_container, :locals => { :title => "Age groups of confirmed cases", :graph_id => "graph_age_groups" }) %>

<script>
  var lines = [];

  for (var stat in state_dataset['total']) {
    if (stat != 'confirmed' && stat != 'recovered' && stat != 'deaths') continue;
    lines.push({
      x: country_dataset['timeseries_dates'],
      y: state_dataset['total'][stat],
      name: stat[0].toUpperCase() + stat.slice(1),
    });
  }

  Plotly.newPlot('graph_overview', lines, $.extend({}, default_layout), default_config);

  var new_cases = [];
  new_cases.push({
    x: country_dataset['timeseries_dates'],
    y: cumulative_to_delta(state_dataset['total']['confirmed']),
    type: 'bar',
  });

  Plotly.newPlot('graph_new_cases', limit_to_biggest_series(new_cases, 10), $.extend({}, default_layout, {barmode: 'stack'}), $.extend({}, default_config));

  if (state_dataset['total']['tested']) {
    var tested_data = [];
    tested_data.push({
      x: country_dataset['timeseries_dates'],
      y: cumulative_to_delta(state_dataset['total']['tested']),
      type: 'bar',
      name: 'Tests conducted',
    });
    tested_data.push({
      x: country_dataset['timeseries_dates'],
      y: cumulative_to_delta(state_dataset['total']['confirmed']),
      type: 'line',
      name: 'Confirmed cases',
    });

    Plotly.newPlot('graph_tests', limit_to_biggest_series(tested_data, 10), $.extend({}, default_layout, {barmode: 'stack'}), $.extend({}, default_config));
  } else {
    // no data, so remove the whole row
    $('#graph_tests_row').remove();
  }

  function optional_trace_over_time(graph_id, series_key, data_is_cumulative) {
    if (state_dataset['total'][series_key]) {
      var traces = [];
      var data = {
        x: country_dataset['timeseries_dates'],
        y: state_dataset['total'][series_key],
        type: 'line',
      };
      if (data_is_cumulative) {
        data.y = cumulative_to_delta(data.y);
        data.type = 'bar';
      }
      traces.push(data);

      Plotly.newPlot(graph_id, traces, $.extend({}, default_layout, {barmode: 'stack'}), $.extend({}, default_config));
    } else {
      // no data, so remove the whole row
      $('#'+graph_id+'_row').remove();
    }
  }
  optional_trace_over_time('graph_hospital_admissions', 'hospitalized', true);
  optional_trace_over_time('graph_hospital_current', 'current_hospitalized', false);
  optional_trace_over_time('graph_icu_current', 'current_icu', false);
  optional_trace_over_time('graph_ventilators_current', 'current_ventilators', false);

  function optional_stacked_bar_over_time(graph_id, dataset_key, convert_to_delta, inclusion_fn, layout_options) {
    var traces = [];
    inclusion_fn = inclusion_fn || function() { return true; };
    layout_options = layout_options || {barmode: 'stack'};

    if (state_dataset[dataset_key]) {
      var keys = state_dataset[dataset_key]['keys'];
      var subseries = state_dataset[dataset_key]['subseries'];

      for (var i in keys) {
        var series_points = subseries[keys[i]];
        if (!inclusion_fn(keys[i])) continue;
        
        if (convert_to_delta) {
          series_points = cumulative_to_delta(series_points);
        }

        traces.push({
          x: country_dataset['timeseries_dates'],
          y: series_points,
          type: 'bar',
          name: keys[i],
        });
      }
    }

    if (traces.length > 0) {
      Plotly.newPlot(graph_id, traces, $.extend({}, default_layout, layout_options), $.extend({}, default_config));
    } else {
      $('#' + graph_id + '_row').remove();
    }
  }
  optional_stacked_bar_over_time('graph_sources', 'sources', false);
  optional_stacked_bar_over_time('graph_community', 'sources', true, function(key) {
    return (key.indexOf('Locally acquired') == 0);
  }, {});
  optional_stacked_bar_over_time('graph_age_groups', 'age_groups', false);

  // deaths

  var new_deaths = [];
  new_deaths.push({
    x: country_dataset['timeseries_dates'],
    y: cumulative_to_delta(state_dataset['total']['deaths']),
    type: 'bar',
  });

  Plotly.newPlot('graph_deaths', new_deaths, $.extend({}, default_layout, {barmode: 'stack'}), $.extend({}, default_config));

</script>
